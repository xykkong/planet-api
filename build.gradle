plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version "2.4.2"
    id 'io.spring.dependency-management' version "1.0.11.RELEASE"
    id 'com.palantir.docker' version "0.26.0"
    id "com.github.spotbugs" version "4.6.1"
    id "com.diffplug.spotless" version "5.10.2"
    id "net.ltgt.errorprone"  version "1.3.0"
    id "net.ltgt.nullaway"  version "1.0.2"
}

group = 'com.example.starwars'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

jacoco {
    toolVersion = "0.8.6"
}

bootJar {
    archiveBaseName = 'planet-api'
    archiveVersion =  '0.0.1-SNAPSHOT'
    mainClass = 'com.example.starwars.planetapi.PlanetServiceApplication'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

task unpack(type: Copy) {
    description 'Copies the resource directory to the target directory.'
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    println "Generating docker image ${project.group}/${project.name}"
    name "${project.group}/${project.name}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

spotless {
  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore', '.properties'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces() //Takes an integer argument if you don't like 4
    endWithNewline()
  }

  java {
    target 'src/*/java/**/*.java'

    importOrder() // standard import order
    removeUnusedImports()

    // apply a specific flavor of google-java-format
    googleJavaFormat('1.9').aosp()
  }
}

import net.ltgt.gradle.errorprone.CheckSeverity
tasks.withType(JavaCompile).configureEach {
  if (!name.toLowerCase().contains("test")) {
    options.errorprone {
      check("NullAway", CheckSeverity.ERROR)
      option("NullAway:AnnotatedPackages", "com.example.starwars.planetapi")
    }
  }
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor "com.uber.nullaway:nullaway:0.8.0"
    annotationProcessor 'org.projectlombok:lombok'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'

    errorprone "com.google.errorprone:error_prone_core:2.5.1"
    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
}
